/* tslint:disable */
/* eslint-disable */
/**
 * Shiori API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1BookmarkTagPayload,
  ApiV1BulkUpdateBookmarkTagsPayload,
  ApiV1LoginRequestPayload,
  ApiV1LoginResponseMessage,
  ApiV1ReadableResponseMessage,
  ApiV1UpdateAccountPayload,
  ApiV1UpdateCachePayload,
  ModelAccount,
  ModelBookmarkDTO,
  ModelTagDTO,
} from '../models/index';
import {
    ApiV1BookmarkTagPayloadFromJSON,
    ApiV1BookmarkTagPayloadToJSON,
    ApiV1BulkUpdateBookmarkTagsPayloadFromJSON,
    ApiV1BulkUpdateBookmarkTagsPayloadToJSON,
    ApiV1LoginRequestPayloadFromJSON,
    ApiV1LoginRequestPayloadToJSON,
    ApiV1LoginResponseMessageFromJSON,
    ApiV1LoginResponseMessageToJSON,
    ApiV1ReadableResponseMessageFromJSON,
    ApiV1ReadableResponseMessageToJSON,
    ApiV1UpdateAccountPayloadFromJSON,
    ApiV1UpdateAccountPayloadToJSON,
    ApiV1UpdateCachePayloadFromJSON,
    ApiV1UpdateCachePayloadToJSON,
    ModelAccountFromJSON,
    ModelAccountToJSON,
    ModelBookmarkDTOFromJSON,
    ModelBookmarkDTOToJSON,
    ModelTagDTOFromJSON,
    ModelTagDTOToJSON,
} from '../models/index';

export interface ApiV1AuthAccountPatchRequest {
    payload?: ApiV1UpdateAccountPayload;
}

export interface ApiV1AuthLoginPostRequest {
    payload?: ApiV1LoginRequestPayload;
}

export interface ApiV1BookmarksBulkTagsPutRequest {
    payload: ApiV1BulkUpdateBookmarkTagsPayload;
}

export interface ApiV1BookmarksCachePutRequest {
    payload: ApiV1UpdateCachePayload;
}

export interface ApiV1BookmarksIdTagsDeleteRequest {
    id: number;
    payload: ApiV1BookmarkTagPayload;
}

export interface ApiV1BookmarksIdTagsGetRequest {
    id: number;
}

export interface ApiV1BookmarksIdTagsPostRequest {
    id: number;
    payload: ApiV1BookmarkTagPayload;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Update account information
     */
    async apiV1AuthAccountPatchRaw(requestParameters: ApiV1AuthAccountPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelAccount>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/account`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1UpdateAccountPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAccountFromJSON(jsonValue));
    }

    /**
     * Update account information
     */
    async apiV1AuthAccountPatch(requestParameters: ApiV1AuthAccountPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelAccount> {
        const response = await this.apiV1AuthAccountPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login to an account using username and password
     */
    async apiV1AuthLoginPostRaw(requestParameters: ApiV1AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1LoginResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1LoginRequestPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1LoginResponseMessageFromJSON(jsonValue));
    }

    /**
     * Login to an account using username and password
     */
    async apiV1AuthLoginPost(requestParameters: ApiV1AuthLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1LoginResponseMessage> {
        const response = await this.apiV1AuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout from the current session
     */
    async apiV1AuthLogoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logout from the current session
     */
    async apiV1AuthLogoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1AuthLogoutPostRaw(initOverrides);
    }

    /**
     * Get information for the current logged in user
     */
    async apiV1AuthMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelAccount>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAccountFromJSON(jsonValue));
    }

    /**
     * Get information for the current logged in user
     */
    async apiV1AuthMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelAccount> {
        const response = await this.apiV1AuthMeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Refresh a token for an account
     */
    async apiV1AuthRefreshPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1LoginResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1LoginResponseMessageFromJSON(jsonValue));
    }

    /**
     * Refresh a token for an account
     */
    async apiV1AuthRefreshPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1LoginResponseMessage> {
        const response = await this.apiV1AuthRefreshPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Bulk update tags for multiple bookmarks.
     */
    async apiV1BookmarksBulkTagsPutRaw(requestParameters: ApiV1BookmarksBulkTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelBookmarkDTO>>> {
        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling apiV1BookmarksBulkTagsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/bookmarks/bulk/tags`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1BulkUpdateBookmarkTagsPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelBookmarkDTOFromJSON));
    }

    /**
     * Bulk update tags for multiple bookmarks.
     */
    async apiV1BookmarksBulkTagsPut(requestParameters: ApiV1BookmarksBulkTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelBookmarkDTO>> {
        const response = await this.apiV1BookmarksBulkTagsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Cache and Ebook on server.
     */
    async apiV1BookmarksCachePutRaw(requestParameters: ApiV1BookmarksCachePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelBookmarkDTO>> {
        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling apiV1BookmarksCachePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/bookmarks/cache`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1UpdateCachePayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelBookmarkDTOFromJSON(jsonValue));
    }

    /**
     * Update Cache and Ebook on server.
     */
    async apiV1BookmarksCachePut(requestParameters: ApiV1BookmarksCachePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelBookmarkDTO> {
        const response = await this.apiV1BookmarksCachePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get readable version of bookmark.
     */
    async apiV1BookmarksIdReadableGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ReadableResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/bookmarks/id/readable`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ReadableResponseMessageFromJSON(jsonValue));
    }

    /**
     * Get readable version of bookmark.
     */
    async apiV1BookmarksIdReadableGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ReadableResponseMessage> {
        const response = await this.apiV1BookmarksIdReadableGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Remove a tag from a bookmark.
     */
    async apiV1BookmarksIdTagsDeleteRaw(requestParameters: ApiV1BookmarksIdTagsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BookmarksIdTagsDelete().'
            );
        }

        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling apiV1BookmarksIdTagsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/bookmarks/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1BookmarkTagPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a tag from a bookmark.
     */
    async apiV1BookmarksIdTagsDelete(requestParameters: ApiV1BookmarksIdTagsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1BookmarksIdTagsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get tags for a bookmark.
     */
    async apiV1BookmarksIdTagsGetRaw(requestParameters: ApiV1BookmarksIdTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelTagDTO>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BookmarksIdTagsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/bookmarks/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelTagDTOFromJSON));
    }

    /**
     * Get tags for a bookmark.
     */
    async apiV1BookmarksIdTagsGet(requestParameters: ApiV1BookmarksIdTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelTagDTO>> {
        const response = await this.apiV1BookmarksIdTagsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a tag to a bookmark.
     */
    async apiV1BookmarksIdTagsPostRaw(requestParameters: ApiV1BookmarksIdTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BookmarksIdTagsPost().'
            );
        }

        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling apiV1BookmarksIdTagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/bookmarks/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1BookmarkTagPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a tag to a bookmark.
     */
    async apiV1BookmarksIdTagsPost(requestParameters: ApiV1BookmarksIdTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1BookmarksIdTagsPostRaw(requestParameters, initOverrides);
    }

}
