/* tslint:disable */
/* eslint-disable */
/**
 * Shiori API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelTagDTO,
} from '../models/index';
import {
    ModelTagDTOFromJSON,
    ModelTagDTOToJSON,
} from '../models/index';

export interface ApiV1TagsGetRequest {
    withBookmarkCount?: boolean;
    bookmarkId?: number;
    search?: string;
}

export interface ApiV1TagsIdDeleteRequest {
    id: number;
}

export interface ApiV1TagsIdGetRequest {
    id: number;
}

export interface ApiV1TagsIdPutRequest {
    id: number;
    tag: ModelTagDTO;
}

export interface ApiV1TagsPostRequest {
    tag: ModelTagDTO;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     * List all tags
     * List tags
     */
    async apiV1TagsGetRaw(requestParameters: ApiV1TagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelTagDTO>>> {
        const queryParameters: any = {};

        if (requestParameters['withBookmarkCount'] != null) {
            queryParameters['with_bookmark_count'] = requestParameters['withBookmarkCount'];
        }

        if (requestParameters['bookmarkId'] != null) {
            queryParameters['bookmark_id'] = requestParameters['bookmarkId'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelTagDTOFromJSON));
    }

    /**
     * List all tags
     * List tags
     */
    async apiV1TagsGet(requestParameters: ApiV1TagsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelTagDTO>> {
        const response = await this.apiV1TagsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a tag
     * Delete tag
     */
    async apiV1TagsIdDeleteRaw(requestParameters: ApiV1TagsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1TagsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a tag
     * Delete tag
     */
    async apiV1TagsIdDelete(requestParameters: ApiV1TagsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1TagsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a tag by ID
     * Get tag
     */
    async apiV1TagsIdGetRaw(requestParameters: ApiV1TagsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelTagDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1TagsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelTagDTOFromJSON(jsonValue));
    }

    /**
     * Get a tag by ID
     * Get tag
     */
    async apiV1TagsIdGet(requestParameters: ApiV1TagsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelTagDTO> {
        const response = await this.apiV1TagsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing tag
     * Update tag
     */
    async apiV1TagsIdPutRaw(requestParameters: ApiV1TagsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelTagDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1TagsIdPut().'
            );
        }

        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling apiV1TagsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelTagDTOToJSON(requestParameters['tag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelTagDTOFromJSON(jsonValue));
    }

    /**
     * Update an existing tag
     * Update tag
     */
    async apiV1TagsIdPut(requestParameters: ApiV1TagsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelTagDTO> {
        const response = await this.apiV1TagsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new tag
     * Create tag
     */
    async apiV1TagsPostRaw(requestParameters: ApiV1TagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelTagDTO>> {
        if (requestParameters['tag'] == null) {
            throw new runtime.RequiredError(
                'tag',
                'Required parameter "tag" was null or undefined when calling apiV1TagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelTagDTOToJSON(requestParameters['tag']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelTagDTOFromJSON(jsonValue));
    }

    /**
     * Create a new tag
     * Create tag
     */
    async apiV1TagsPost(requestParameters: ApiV1TagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelTagDTO> {
        const response = await this.apiV1TagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
