/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1BookmarkDataResponse,
  ApiV1BookmarkTagPayload,
  ApiV1BulkUpdateBookmarkTagsPayload,
  ApiV1CreateBookmarkPayload,
  ApiV1DeleteBookmarksPayload,
  ApiV1ReadableResponseMessage,
  ApiV1UpdateBookmarkDataPayload,
  ApiV1UpdateBookmarkPayload,
  ApiV1UpdateCachePayload,
  ModelBookmarkDTO,
  ModelTagDTO,
} from '../models/index';
import {
    ApiV1BookmarkDataResponseFromJSON,
    ApiV1BookmarkDataResponseToJSON,
    ApiV1BookmarkTagPayloadFromJSON,
    ApiV1BookmarkTagPayloadToJSON,
    ApiV1BulkUpdateBookmarkTagsPayloadFromJSON,
    ApiV1BulkUpdateBookmarkTagsPayloadToJSON,
    ApiV1CreateBookmarkPayloadFromJSON,
    ApiV1CreateBookmarkPayloadToJSON,
    ApiV1DeleteBookmarksPayloadFromJSON,
    ApiV1DeleteBookmarksPayloadToJSON,
    ApiV1ReadableResponseMessageFromJSON,
    ApiV1ReadableResponseMessageToJSON,
    ApiV1UpdateBookmarkDataPayloadFromJSON,
    ApiV1UpdateBookmarkDataPayloadToJSON,
    ApiV1UpdateBookmarkPayloadFromJSON,
    ApiV1UpdateBookmarkPayloadToJSON,
    ApiV1UpdateCachePayloadFromJSON,
    ApiV1UpdateCachePayloadToJSON,
    ModelBookmarkDTOFromJSON,
    ModelBookmarkDTOToJSON,
    ModelTagDTOFromJSON,
    ModelTagDTOToJSON,
} from '../models/index';

export interface ApiV1BookmarksBulkTagsPutRequest {
    payload: ApiV1BulkUpdateBookmarkTagsPayload;
}

export interface ApiV1BookmarksCachePutRequest {
    payload: ApiV1UpdateCachePayload;
}

export interface ApiV1BookmarksDeleteRequest {
    payload: ApiV1DeleteBookmarksPayload;
}

export interface ApiV1BookmarksGetRequest {
    keyword?: string;
    tags?: string;
    exclude?: string;
    page?: number;
    limit?: number;
}

export interface ApiV1BookmarksIdDataGetRequest {
    id: number;
}

export interface ApiV1BookmarksIdDataPutRequest {
    id: number;
    payload: ApiV1UpdateBookmarkDataPayload;
}

export interface ApiV1BookmarksIdGetRequest {
    id: number;
}

export interface ApiV1BookmarksIdPutRequest {
    id: number;
    payload: ApiV1UpdateBookmarkPayload;
}

export interface ApiV1BookmarksIdTagsDeleteRequest {
    id: number;
    payload: ApiV1BookmarkTagPayload;
}

export interface ApiV1BookmarksIdTagsGetRequest {
    id: number;
}

export interface ApiV1BookmarksIdTagsPostRequest {
    id: number;
    payload: ApiV1BookmarkTagPayload;
}

export interface ApiV1BookmarksPostRequest {
    payload: ApiV1CreateBookmarkPayload;
}

/**
 * 
 */
export class BookmarksApi extends runtime.BaseAPI {

    /**
     * Bulk update tags for multiple bookmarks.
     */
    async apiV1BookmarksBulkTagsPutRaw(requestParameters: ApiV1BookmarksBulkTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelBookmarkDTO>>> {
        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling apiV1BookmarksBulkTagsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/bookmarks/bulk/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1BulkUpdateBookmarkTagsPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelBookmarkDTOFromJSON));
    }

    /**
     * Bulk update tags for multiple bookmarks.
     */
    async apiV1BookmarksBulkTagsPut(requestParameters: ApiV1BookmarksBulkTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelBookmarkDTO>> {
        const response = await this.apiV1BookmarksBulkTagsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Cache and Ebook on server.
     */
    async apiV1BookmarksCachePutRaw(requestParameters: ApiV1BookmarksCachePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelBookmarkDTO>> {
        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling apiV1BookmarksCachePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/bookmarks/cache`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1UpdateCachePayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelBookmarkDTOFromJSON(jsonValue));
    }

    /**
     * Update Cache and Ebook on server.
     */
    async apiV1BookmarksCachePut(requestParameters: ApiV1BookmarksCachePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelBookmarkDTO> {
        const response = await this.apiV1BookmarksCachePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete one or more bookmarks.
     */
    async apiV1BookmarksDeleteRaw(requestParameters: ApiV1BookmarksDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling apiV1BookmarksDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/bookmarks`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1DeleteBookmarksPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete one or more bookmarks.
     */
    async apiV1BookmarksDelete(requestParameters: ApiV1BookmarksDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1BookmarksDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * List bookmarks with optional filtering.
     */
    async apiV1BookmarksGetRaw(requestParameters: ApiV1BookmarksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelBookmarkDTO>>> {
        const queryParameters: any = {};

        if (requestParameters['keyword'] != null) {
            queryParameters['keyword'] = requestParameters['keyword'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['exclude'] != null) {
            queryParameters['exclude'] = requestParameters['exclude'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/bookmarks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelBookmarkDTOFromJSON));
    }

    /**
     * List bookmarks with optional filtering.
     */
    async apiV1BookmarksGet(requestParameters: ApiV1BookmarksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelBookmarkDTO>> {
        const response = await this.apiV1BookmarksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get bookmark data and resource URLs.
     */
    async apiV1BookmarksIdDataGetRaw(requestParameters: ApiV1BookmarksIdDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1BookmarkDataResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BookmarksIdDataGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/bookmarks/{id}/data`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1BookmarkDataResponseFromJSON(jsonValue));
    }

    /**
     * Get bookmark data and resource URLs.
     */
    async apiV1BookmarksIdDataGet(requestParameters: ApiV1BookmarksIdDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1BookmarkDataResponse> {
        const response = await this.apiV1BookmarksIdDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update bookmark data (content, archive, ebook).
     */
    async apiV1BookmarksIdDataPutRaw(requestParameters: ApiV1BookmarksIdDataPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1BookmarkDataResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BookmarksIdDataPut().'
            );
        }

        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling apiV1BookmarksIdDataPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/bookmarks/{id}/data`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1UpdateBookmarkDataPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1BookmarkDataResponseFromJSON(jsonValue));
    }

    /**
     * Update bookmark data (content, archive, ebook).
     */
    async apiV1BookmarksIdDataPut(requestParameters: ApiV1BookmarksIdDataPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1BookmarkDataResponse> {
        const response = await this.apiV1BookmarksIdDataPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a bookmark by ID.
     */
    async apiV1BookmarksIdGetRaw(requestParameters: ApiV1BookmarksIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelBookmarkDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BookmarksIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/bookmarks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelBookmarkDTOFromJSON(jsonValue));
    }

    /**
     * Get a bookmark by ID.
     */
    async apiV1BookmarksIdGet(requestParameters: ApiV1BookmarksIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelBookmarkDTO> {
        const response = await this.apiV1BookmarksIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing bookmark.
     */
    async apiV1BookmarksIdPutRaw(requestParameters: ApiV1BookmarksIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelBookmarkDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BookmarksIdPut().'
            );
        }

        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling apiV1BookmarksIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/bookmarks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1UpdateBookmarkPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelBookmarkDTOFromJSON(jsonValue));
    }

    /**
     * Update an existing bookmark.
     */
    async apiV1BookmarksIdPut(requestParameters: ApiV1BookmarksIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelBookmarkDTO> {
        const response = await this.apiV1BookmarksIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get readable version of bookmark.
     */
    async apiV1BookmarksIdReadableGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ReadableResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/bookmarks/id/readable`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ReadableResponseMessageFromJSON(jsonValue));
    }

    /**
     * Get readable version of bookmark.
     */
    async apiV1BookmarksIdReadableGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ReadableResponseMessage> {
        const response = await this.apiV1BookmarksIdReadableGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Remove a tag from a bookmark.
     */
    async apiV1BookmarksIdTagsDeleteRaw(requestParameters: ApiV1BookmarksIdTagsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BookmarksIdTagsDelete().'
            );
        }

        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling apiV1BookmarksIdTagsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/bookmarks/{id}/tags`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1BookmarkTagPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a tag from a bookmark.
     */
    async apiV1BookmarksIdTagsDelete(requestParameters: ApiV1BookmarksIdTagsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1BookmarksIdTagsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get tags for a bookmark.
     */
    async apiV1BookmarksIdTagsGetRaw(requestParameters: ApiV1BookmarksIdTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ModelTagDTO>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BookmarksIdTagsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/bookmarks/{id}/tags`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelTagDTOFromJSON));
    }

    /**
     * Get tags for a bookmark.
     */
    async apiV1BookmarksIdTagsGet(requestParameters: ApiV1BookmarksIdTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ModelTagDTO>> {
        const response = await this.apiV1BookmarksIdTagsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a tag to a bookmark.
     */
    async apiV1BookmarksIdTagsPostRaw(requestParameters: ApiV1BookmarksIdTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiV1BookmarksIdTagsPost().'
            );
        }

        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling apiV1BookmarksIdTagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/bookmarks/{id}/tags`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1BookmarkTagPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a tag to a bookmark.
     */
    async apiV1BookmarksIdTagsPost(requestParameters: ApiV1BookmarksIdTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1BookmarksIdTagsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new bookmark.
     */
    async apiV1BookmarksPostRaw(requestParameters: ApiV1BookmarksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelBookmarkDTO>> {
        if (requestParameters['payload'] == null) {
            throw new runtime.RequiredError(
                'payload',
                'Required parameter "payload" was null or undefined when calling apiV1BookmarksPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/bookmarks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1CreateBookmarkPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelBookmarkDTOFromJSON(jsonValue));
    }

    /**
     * Create a new bookmark.
     */
    async apiV1BookmarksPost(requestParameters: ApiV1BookmarksPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelBookmarkDTO> {
        const response = await this.apiV1BookmarksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
