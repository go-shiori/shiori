/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1LoginRequestPayload,
  ApiV1LoginResponseMessage,
  ApiV1UpdateAccountPayload,
  ModelAccount,
} from '../models/index';
import {
    ApiV1LoginRequestPayloadFromJSON,
    ApiV1LoginRequestPayloadToJSON,
    ApiV1LoginResponseMessageFromJSON,
    ApiV1LoginResponseMessageToJSON,
    ApiV1UpdateAccountPayloadFromJSON,
    ApiV1UpdateAccountPayloadToJSON,
    ModelAccountFromJSON,
    ModelAccountToJSON,
} from '../models/index';

export interface ApiV1AuthAccountPatchRequest {
    payload?: ApiV1UpdateAccountPayload;
}

export interface ApiV1AuthLoginPostRequest {
    payload?: ApiV1LoginRequestPayload;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Update account information
     */
    async apiV1AuthAccountPatchRaw(requestParameters: ApiV1AuthAccountPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelAccount>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/auth/account`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1UpdateAccountPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAccountFromJSON(jsonValue));
    }

    /**
     * Update account information
     */
    async apiV1AuthAccountPatch(requestParameters: ApiV1AuthAccountPatchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelAccount> {
        const response = await this.apiV1AuthAccountPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login to an account using username and password
     */
    async apiV1AuthLoginPostRaw(requestParameters: ApiV1AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1LoginResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/auth/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1LoginRequestPayloadToJSON(requestParameters['payload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1LoginResponseMessageFromJSON(jsonValue));
    }

    /**
     * Login to an account using username and password
     */
    async apiV1AuthLoginPost(requestParameters: ApiV1AuthLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1LoginResponseMessage> {
        const response = await this.apiV1AuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout from the current session
     */
    async apiV1AuthLogoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/auth/logout`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logout from the current session
     */
    async apiV1AuthLogoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV1AuthLogoutPostRaw(initOverrides);
    }

    /**
     * Get information for the current logged in user
     */
    async apiV1AuthMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelAccount>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/auth/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelAccountFromJSON(jsonValue));
    }

    /**
     * Get information for the current logged in user
     */
    async apiV1AuthMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelAccount> {
        const response = await this.apiV1AuthMeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Refresh a token for an account
     */
    async apiV1AuthRefreshPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1LoginResponseMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/auth/refresh`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1LoginResponseMessageFromJSON(jsonValue));
    }

    /**
     * Refresh a token for an account
     */
    async apiV1AuthRefreshPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1LoginResponseMessage> {
        const response = await this.apiV1AuthRefreshPostRaw(initOverrides);
        return await response.value();
    }

}
