// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-shiori/shiori/internal/database (interfaces: DB)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/database.go -package=mocks github.com/go-shiori/shiori/internal/database DB
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	database "github.com/go-shiori/shiori/internal/database"
	model "github.com/go-shiori/shiori/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CreateTags mocks base method.
func (m *MockDB) CreateTags(arg0 context.Context, arg1 ...model.Tag) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTags", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTags indicates an expected call of CreateTags.
func (mr *MockDBMockRecorder) CreateTags(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockDB)(nil).CreateTags), varargs...)
}

// DeleteAccounts mocks base method.
func (m *MockDB) DeleteAccounts(arg0 context.Context, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccounts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccounts indicates an expected call of DeleteAccounts.
func (mr *MockDBMockRecorder) DeleteAccounts(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccounts", reflect.TypeOf((*MockDB)(nil).DeleteAccounts), varargs...)
}

// DeleteBookmarks mocks base method.
func (m *MockDB) DeleteBookmarks(arg0 context.Context, arg1 ...int) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBookmarks", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookmarks indicates an expected call of DeleteBookmarks.
func (mr *MockDBMockRecorder) DeleteBookmarks(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookmarks", reflect.TypeOf((*MockDB)(nil).DeleteBookmarks), varargs...)
}

// GetAccount mocks base method.
func (m *MockDB) GetAccount(arg0 context.Context, arg1 string) (model.Account, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(model.Account)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockDBMockRecorder) GetAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockDB)(nil).GetAccount), arg0, arg1)
}

// GetAccounts mocks base method.
func (m *MockDB) GetAccounts(arg0 context.Context, arg1 database.GetAccountsOptions) ([]model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", arg0, arg1)
	ret0, _ := ret[0].([]model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockDBMockRecorder) GetAccounts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockDB)(nil).GetAccounts), arg0, arg1)
}

// GetBookmark mocks base method.
func (m *MockDB) GetBookmark(arg0 context.Context, arg1 int, arg2 string) (model.BookmarkDTO, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmark", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.BookmarkDTO)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBookmark indicates an expected call of GetBookmark.
func (mr *MockDBMockRecorder) GetBookmark(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmark", reflect.TypeOf((*MockDB)(nil).GetBookmark), arg0, arg1, arg2)
}

// GetBookmarks mocks base method.
func (m *MockDB) GetBookmarks(arg0 context.Context, arg1 database.GetBookmarksOptions) ([]model.BookmarkDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmarks", arg0, arg1)
	ret0, _ := ret[0].([]model.BookmarkDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmarks indicates an expected call of GetBookmarks.
func (mr *MockDBMockRecorder) GetBookmarks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmarks", reflect.TypeOf((*MockDB)(nil).GetBookmarks), arg0, arg1)
}

// GetBookmarksCount mocks base method.
func (m *MockDB) GetBookmarksCount(arg0 context.Context, arg1 database.GetBookmarksOptions) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmarksCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmarksCount indicates an expected call of GetBookmarksCount.
func (mr *MockDBMockRecorder) GetBookmarksCount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmarksCount", reflect.TypeOf((*MockDB)(nil).GetBookmarksCount), arg0, arg1)
}

// GetTags mocks base method.
func (m *MockDB) GetTags(arg0 context.Context) ([]model.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", arg0)
	ret0, _ := ret[0].([]model.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockDBMockRecorder) GetTags(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockDB)(nil).GetTags), arg0)
}

// Migrate mocks base method.
func (m *MockDB) Migrate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockDBMockRecorder) Migrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockDB)(nil).Migrate))
}

// RenameTag mocks base method.
func (m *MockDB) RenameTag(arg0 context.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameTag indicates an expected call of RenameTag.
func (mr *MockDBMockRecorder) RenameTag(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameTag", reflect.TypeOf((*MockDB)(nil).RenameTag), arg0, arg1, arg2)
}

// SaveAccount mocks base method.
func (m *MockDB) SaveAccount(arg0 context.Context, arg1 model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccount indicates an expected call of SaveAccount.
func (mr *MockDBMockRecorder) SaveAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccount", reflect.TypeOf((*MockDB)(nil).SaveAccount), arg0, arg1)
}

// SaveAccountSettings mocks base method.
func (m *MockDB) SaveAccountSettings(arg0 context.Context, arg1 model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccountSettings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccountSettings indicates an expected call of SaveAccountSettings.
func (mr *MockDBMockRecorder) SaveAccountSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccountSettings", reflect.TypeOf((*MockDB)(nil).SaveAccountSettings), arg0, arg1)
}

// SaveBookmarks mocks base method.
func (m *MockDB) SaveBookmarks(arg0 context.Context, arg1 bool, arg2 ...model.BookmarkDTO) ([]model.BookmarkDTO, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBookmarks", varargs...)
	ret0, _ := ret[0].([]model.BookmarkDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBookmarks indicates an expected call of SaveBookmarks.
func (mr *MockDBMockRecorder) SaveBookmarks(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBookmarks", reflect.TypeOf((*MockDB)(nil).SaveBookmarks), varargs...)
}
